(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _utils = require('./utils');

var _stft = require('./stft');

var _stft2 = _interopRequireDefault(_stft);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* Functions */

/**
 * Implementation of the Spectral Flux onset detection method
 * described in "Simple Spectrum-Based Onset Detection" (http://www.music-ir.org/evaluation/MIREX/2006_abstracts/OD_dixon.pdf)
 */

function resizeCanvas(canvas) {
  var displayWidth = canvas.clientWidth;
  var displayHeight = canvas.clientHeight;

  if (canvas.width !== displayWidth || canvas.height !== displayHeight) {
    canvas.width = displayWidth;
    canvas.height = displayHeight;
  }
}

function loadAudio(context, url) {
  return new Promise(function (resolve, reject) {
    var request = new XMLHttpRequest();

    request.open('GET', url, true);
    request.responseType = 'arraybuffer';

    request.onload = function () {
      context.decodeAudioData(request.response, function (buffer) {
        resolve(buffer);
      }, function (error) {
        reject(error);
      });
    };

    request.onerror = function () {
      reject(Error("Network Error"));
    };

    request.send();
  });
}

function playSound(sourceNode) {
  sourceNode.start(0);
}

function setupAudioNodes(context) {
  /**
   * context.destination is a special node that is associated
   * with the default audio output of your system
   */
  var sourceNode = context.createBufferSource();
  sourceNode.connect(context.destination);

  var analyserNode = context.createAnalyser();
  analyserNode.fftSize = 2048;
  analyserNode.smoothingTimeConstant = 0.785;

  sourceNode.connect(analyserNode);

  return {
    sourceNode: sourceNode,
    analyserNode: analyserNode
  };
}

function halfWaveRectifier(x) {
  return (x + Math.abs(x)) / 2;
}

function spectralFlux(frequencyMatrix) {}

function visualize() {
  // audio context variables
  var context = new _utils.AudioContext();
  var nodes = setupAudioNodes(context);

  // canvas variables
  var canvas = document.getElementById('canvas');
  var canvasCtx = canvas.getContext('2d');

  resizeCanvas(canvas);
  var width = canvas.width;
  var height = canvas.height;

  canvasCtx.clearRect(0, 0, width, height);

  canvasCtx.fillStyle = 'rgb(0, 0, 0)';
  canvasCtx.fillRect(0, 0, width, height);

  loadAudio(context, 'sounds/flim.mp3').then(function (buffer) {
    (0, _stft2.default)(buffer).then(function (stftData) {
      debugger;
      nodes.sourceNode.buffer = buffer;
      playSound(nodes.sourceNode);
    });
  });
}

visualize();

},{"./stft":2,"./utils":3}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = stft;

var _utils = require('./utils');

function stft(buffer) {
  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  var numOfChannels = options.numOfChannels || 1;
  var sampleRate = options.sampleRate || 44100;
  var offlineContext = new _utils.OfflineAudioContext(numOfChannels, buffer.length, sampleRate);

  var stftData = [];

  var source = offlineContext.createBufferSource();
  source.buffer = buffer;

  var analyser = offlineContext.createAnalyser();
  analyser.fftSize = options.fftSize || 2048;
  analyser.smoothingTimeConstant = options.smoothingTimeConstant || 0.785;

  var stftProcessor = offlineContext.createScriptProcessor(analyser.frequencyBinCount, 1, 1);

  stftProcessor.onaudioprocess = function () {
    var fftData = new Uint8Array(analyser.frequencyBinCount);
    analyser.getByteFrequencyData(fftData);
    stftData.push(fftData);
  };

  source.connect(analyser);
  analyser.connect(stftProcessor);
  stftProcessor.connect(offlineContext.destination);

  source.start(0);

  return offlineContext.startRendering().then(function () {
    debugger;
    return stftData;
  });
}

},{"./utils":3}],3:[function(require,module,exports){
(function (global){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var requestAnimationFrame = exports.requestAnimationFrame = global.requestAnimationFrame || function () {
  return global.webkitRequestAnimationFrame || global.mozRequestAnimationFrame || global.oRequestAnimationFrame || global.msRequestAnimationFrame || function (callback) {
    global.setTimeout(callback, 1000 / 60);
  };
}();

var AudioContext = exports.AudioContext = global.AudioContext || global.webkitAudioContext;
var OfflineAudioContext = exports.OfflineAudioContext = global.OfflineAudioContext || global.webkitOfflineAudioContext;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
