(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _utils = require('./utils');

/* Functions */

function playSound(sourceNode) {
  sourceNode.start(0);
} /**
   * Implementation of the Spectral Flux onset detection method
   * described in "Simple Spectrum-Based Onset Detection" (http://www.music-ir.org/evaluation/MIREX/2006_abstracts/OD_dixon.pdf)
   */

function setupAudioNodes(context, _ref) {
  var stftData = _ref.stftData;
  var spectralFluxData = _ref.spectralFluxData;
  var standardizedSpectralFluxData = _ref.standardizedSpectralFluxData;

  var sourceNode = context.createBufferSource();
  var spectralFluxProcessor = context.createScriptProcessor(512, 1, 1);

  spectralFluxProcessor.onaudioprocess = function (audioProcessingEvent) {
    var playbackTime = audioProcessingEvent.playbackTime;
    // preprocessedDataBin = playbackTime * 44100 (sample rate) / 441 (STFT hop size)
    var preprocessedDataBin = Math.floor(playbackTime * 100);
    console.log(standardizedSpectralFluxData[preprocessedDataBin]);
  };

  sourceNode.connect(spectralFluxProcessor);
  spectralFluxProcessor.connect(context.destination);

  return {
    sourceNode: sourceNode,
    analyserNode: spectralFluxProcessor
  };
}

function visualize() {
  // audio context variables
  var context = new _utils.AudioContext();

  // canvas variables
  var canvas = document.getElementById('canvas');
  var canvasCtx = canvas.getContext('2d');

  (0, _utils.resizeCanvas)(canvas);
  var width = canvas.width;
  var height = canvas.height;

  canvasCtx.clearRect(0, 0, width, height);

  canvasCtx.fillStyle = 'rgb(0, 0, 0)';
  canvasCtx.fillRect(0, 0, width, height);

  var stftWorker = new _utils.Worker('js/workers/stft-worker.js');

  (0, _utils.loadAudio)(context, 'sounds/flim.mp3').then(function (audioBuffer) {
    var audioBufferData = audioBuffer.getChannelData(0).slice();

    stftWorker.onmessage = function (e) {
      var nodes = setupAudioNodes(context, e.data);
      nodes.sourceNode.buffer = audioBuffer;
      playSound(nodes.sourceNode);
    };

    stftWorker.postMessage(audioBufferData, [audioBufferData.buffer]);
  });
}

visualize();

},{"./utils":2}],2:[function(require,module,exports){
(function (global){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var requestAnimationFrame = global.requestAnimationFrame || function () {
  return global.webkitRequestAnimationFrame || global.mozRequestAnimationFrame || global.oRequestAnimationFrame || global.msRequestAnimationFrame || function (callback) {
    global.setTimeout(callback, 1000 / 60);
  };
}();

var AudioContext = global.AudioContext || global.webkitAudioContext;
var OfflineAudioContext = global.OfflineAudioContext || global.webkitOfflineAudioContext;
var Worker = global.Worker || global.webkitWorker;

function loadAudio(audioContext, url) {
  return new Promise(function (resolve, reject) {
    var request = new XMLHttpRequest();

    request.open('GET', url, true);
    request.responseType = 'arraybuffer';

    var onDecodeSuccess = function onDecodeSuccess(buffer) {
      resolve(buffer);
    };
    var onDecodeFailure = function onDecodeFailure(error) {
      reject(error);
    };

    request.onload = function () {
      audioContext.decodeAudioData(request.response, onDecodeSuccess, onDecodeFailure);
    };

    request.onerror = function () {
      reject(Error('Network Error'));
    };

    request.send();
  });
}

function resizeCanvas(canvas) {
  var displayWidth = canvas.clientWidth;
  var displayHeight = canvas.clientHeight;

  if (canvas.width !== displayWidth || canvas.height !== displayHeight) {
    canvas.width = displayWidth;
    canvas.height = displayHeight;
  }
}

exports.AudioContext = AudioContext;
exports.OfflineAudioContext = OfflineAudioContext;
exports.Worker = Worker;
exports.requestAnimationFrame = requestAnimationFrame;
exports.loadAudio = loadAudio;
exports.resizeCanvas = resizeCanvas;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
